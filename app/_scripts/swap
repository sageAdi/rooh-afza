import axios from 'axios';
import OneInch from '../_utils/OneInch';
import { ethers } from 'ethers';

const validation = ({ chainId, tokenIn, tokenOut, amount, from, slippage }) => {
  if (!chainId) {
    throw new Error('chainId is required');
  }
  if (tokenIn === tokenOut) {
    throw new Error('tokenIn and tokenOut cannot be the same');
  }
  if (amount <= 0) {
    throw new Error('amount must be greater than 0');
  }
  if (from) {
    throw new Error('no sender address sended');
  }
  if (slippage > -1 && slippage < 51) {
    throw new Error('slippage must be between 0 and 50');
  }
};

async function quote(chainId, src, dst, amount) {
  validation(chainId, tokenIn, tokenOut, amount);
  const params = {
    src,
    dst,
    amount,
    includeTokensInfo: true,
    includeProtocols: true,
    includeGas: false,
  };
  const config = {
    headers: {
      Authorization: 'Bearer TA39NNwhjFZwhwBmpXjzJAnoHdZztswP',
    },
    params,
  };
  const response = await axios.get(`${OneInch.BASE_URL}${chainId}/quote`, config);
  if (response?.result?.data) {
    const _data = response?.result?.data;
    console.log({ _data });
    return _data.toAmount;
  }
}

async function swap(_data) {
  const signer = await getSigner();
  validation(_data);
  const params = {
    ..._data,
    includeTokensInfo: true,
    includeProtocols: true,
    includeGas: false,
  };
  const config = {
    headers: {
      Authorization: 'Bearer TA39NNwhjFZwhwBmpXjzJAnoHdZztswP',
    },
    params,
  };
  const response = await axios.get(`${OneInch.BASE_URL}${chainId}/swap`, config);
  if (response?.result?.data) {
    const _data = response?.result?.data;
    console.log({ _data });
    const contractInstance = new Contract(address, contractABI, signer);
    const txResponse = await signer(contractInstance).swap();
    await txResponse.wait();
    return txResponse.hash;
  }
}
